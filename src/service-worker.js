// Generate a service worker (this is created by Sapper)
import { timestamp, files, shell, routes } from "@sapper/service-worker";

// Make sure a new cache is created for each fresh build
const ASSETS = `cache${timestamp}`;

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const toCache = shell.concat(files);
const cached = new Set(toCache);

self.addEventListener("install", event => {
  // Create a fresh cache and add all static files to it
  event.waitUntil(
    caches
      .open(ASSETS)
      .then(cache => cache.addAll(toCache))
      .then(() => {
        self.skipWaiting();
      })
  );
});

self.addEventListener("activate", event => {
  // Delete any old caches
  event.waitUntil(
    caches.keys().then(async keys => {
      for (const key of keys) {
        if (key !== ASSETS) await caches.delete(key);
      }

      self.clients.claim();
    })
  );
});

self.addEventListener("fetch", event => {
  // Only intercept GET requests for assets
  if (event.request.method !== "GET" || event.request.headers.has("range")) {
    return;
  }

  const url = new URL(event.request.url);

  // Only deal with HTTP/HTTPS requests
  if (!url.protocol.startsWith("http")) return;

  // Only deal with requests not a part of the development server setup
  if (
    url.hostname === self.location.hostname &&
    url.port !== self.location.port
  ) {
    return;
  }

  // Serve static content from cache if it's available
  if (url.host === self.location.host && cached.has(url.pathname)) {
    event.respondWith(caches.match(event.request));
    return;
  }

  // Avoid Chromium bug
  if (event.request.cache === "only-if-cached") {
    return;
  }

  event.respondWith(
    // Try and fetch the asset from the server first
    caches.open(`offline${timestamp}`).then(async cache => {
      try {
        const response = await fetch(event.request);
        cache.put(event.request, response.clone());

        return response;
      } catch (err) {
        // Else respond from the cache
        const response = await cache.match(event.request);

        if (response) {
          return response;
        }

        throw err;
      }
    })
  );
});
